import subprocess
import sys
import numpy as np
import argparse
from activities.activity_factory import ActivityFactory
from data_logging.hdf5_point_logger import Hdf5PointLogger
from data_logging.logger import Logger
from data_logging.csv_point_logger import CSVPointLogger
from data_logging.video_logger import VideoLogger
from data_logging.zarr_point_logger import ZarrPointLogger
from ui.pygame.pygame_ui import PyGameUI
from constants.constants import *


class TwoDimensionGame():
    """
    Creates a 2-dimensional user interface displaying the results
    of a pose detection algorithm. Allows users to interact with
    said user interface using detected points on their body.
    """

    NUM_LANDMARKS = 33

    def __init__(self, objects, metaphor: str = "pull", guidance_approach: str = "two-tactor",
                 intensity: str = "linear", layout: str = "vertical"):

        self.objects = objects
        self.body_point_array = np.zeros((self.NUM_LANDMARKS, 4))
        self.metaphor = metaphor
        self.guidance_approach = guidance_approach
        self.intensity = intensity
        self.layout = layout

        # if not self.args.hide_demo:
        subprocess.Popen(['python', 'play_demo.py', 'vector_haptic'])

        # # Init loggers
        self.loggers: list[Logger] = []

    def start(self):
        """Initializes the game's user interface and starts processing data"""
        # Initialize graphs and labels for the user interface
        self.init_ui()

        # Start processing images
        self.process()

    def arg_parse(self):
        """Parses the arguments given to the program"""
        parser = argparse.ArgumentParser(description='''
        Recieves skeleton data from a queue and generates a user interface for the
        skeleton data to interact with. Is meant to consume data generated by start_pose.py''')
        parser.add_argument("--record_points", action="store_true", help="Record point data")
        parser.add_argument("--record_zarr", action="store_true", help="Record zarr data")
        parser.add_argument("--record_hdf5", action="store_true", help="Record hdf5 data")
        parser.add_argument("--activity", nargs="?", const="game", default="game",
                            help="Activity to be recorded, default is game")
        parser.add_argument("--file", nargs="?", const=".", default=".",
                            help="Path to the file to be used as the activity")
        parser.add_argument("--hide_demo", action="store_true", help="Set to hide demo video")
        parser.add_argument("--gui", choices=["pygame", "pyqtgraph"], default="pygame",
                            help="The user interface to use")
        parser.add_argument("--queue", choices=["rabbitmq", "redis"], default="redis",
                            help="The type of queue to use to accept skeleton data.")
        self.args = parser.parse_args()

    def init_ui(self):
        """Starts the ui and chooses the correct activity
        to play based on the command line arguments given.
        Registers functional arguments and passes those to
        the relevant activity."""

        self.gui = PyGameUI()

        self.gui.new_gui()

        '''Dict of functions to be given to the activity. This is done this way
        in order to allow for control of things like logging to be handled by
        the activity being played rather than by this main file. Moreso, this
        reduces the amount of coupling between the logger and the activity.
        Instead of having the activity import the logger and therefore have
        it be dependant on it, the activity just runs whatever functions are
        given to it at the times specified in the activity. This allows for
        very specific activity classes (as intended) but very general logging
        classes.'''
        funcs = {
            START_LOGGING: [logger.start_logging for logger in self.loggers],
            STOP_LOGGING: [logger.stop_logging for logger in self.loggers],
            NEW_LOG: [logger.new_log for logger in self.loggers],
            CLOSE: [logger.close for logger in self.loggers]
        }

        af = ActivityFactory("vector_haptic")
        self.activity = af.new_activity(self.body_point_array, "pygame", funcs, ".", metaphor=self.metaphor,
                                        guidance_approach=self.guidance_approach, intensity=self.intensity,
                                        layout=self.layout)

        if self.activity == None:
            print(f"Cannot find activity: {self.type}")
            sys.exit(0)

        # Dict of components persistant in the ui (don't change between stages)
        # i.e. the clock and the point skeleton components
        self.persistant = self.activity.get_persist()

        # Call change activity initially to render components
        # self.activity.change_stage()

    def process(self, goal=None, turn_off=False, alpha=0, radius=0):
        # if body is not None:
        if goal is None:
            goal = []
        try:
            # Updating the body_points_array based on the first object detected by the camera
            self.body_point_array = np.array(self.objects.object_list[0].keypoint)
            self.activity.body_point_array = self.body_point_array[KEY_POINT]
        except:
            pass

        # Handles the activity's logic at the end of a frame
        self.activity.handle_frame(surface=self.gui.window, goal=goal, turn_off=turn_off, alpha=alpha, radius=radius,
                                   metaphor=self.metaphor, guidance_approach=self.guidance_approach,
                                   intensity=self.intensity)

        # self.persistant[TIMER].tick()

    def log_data(self):
        """Calls the log method on any instantiated loggers"""
        for logger in self.loggers:
            if isinstance(logger, CSVPointLogger) or isinstance(logger, ZarrPointLogger) or isinstance(logger,
                                                                                                       Hdf5PointLogger):
                logger.log(self.body_point_array)
            if isinstance(logger, VideoLogger):
                logger.log(self.image)
